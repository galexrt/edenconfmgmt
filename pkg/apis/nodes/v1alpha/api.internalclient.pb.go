// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/galexrt/edenconfmgmt/pkg/apis/nodes/v1alpha/api.proto

package v1alpha

import (
	context "context"
	fmt "fmt"
	_ "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1"
	github_com_galexrt_edenconfmgmt_pkg_apis_core_v1 "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1"
	_ "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha"
	_ "github.com/galexrt/edenconfmgmt/pkg/grpc/plugins/internalclient"
	github_com_galexrt_edenconfmgmt_pkg_store_cache "github.com/galexrt/edenconfmgmt/pkg/store/cache"
	github_com_galexrt_edenconfmgmt_pkg_store_object "github.com/galexrt/edenconfmgmt/pkg/store/object"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Client !!WARNING!! This client must only be used by internal code!
// All "external" clients must use the actual GRPC API Client.
type Client struct {
	store *github_com_galexrt_edenconfmgmt_pkg_store_object.Store
}

// NewClient returns a new Client to be used with the given storage.
func NewClient(store *github_com_galexrt_edenconfmgmt_pkg_store_object.Store) *Client {
	return &Client{
		store: store,
	}
}

// InformerResult
type InformerResult struct {
	Closed  bool
	Errors  []error
	State   github_com_galexrt_edenconfmgmt_pkg_store_cache.ResultState
	Key     string
	Value   *Node
	Version int64
}

// Get
func (this *Client) Get(ctx context.Context, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.GetOptions) (*Node, error) {
	out, err := this.store.Get(context.Background(), opts)
	if err != nil {
		return nil, nil
	}
	casted, ok := out.(*Node)
	if !ok {
		return nil, fmt.Errorf("failed to cast to Node. out: %+v", out)
	}
	return casted, nil
}

// List
func (this *Client) List(ctx context.Context, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.ListOptions) (*NodeList, error) {
	out, err := this.store.List(context.Background(), opts)
	if err != nil {
		return nil, err
	}
	list := &NodeList{}
	list.Items = make([]*Node, len(out))
	for k := range out {
		var ok bool
		list.Items[k], ok = out[k].(*Node)
		if !ok {
			return nil, fmt.Errorf("failed to cast entry %d to Node. out: %+v", k, out)
		}
	}
	return list, nil
}

// Create
func (this *Client) Create(ctx context.Context, obj *Node, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.CreateOptions) (*Node, error) {
	out, err := this.store.Create(context.Background(), opts)
	if err != nil {
		return nil, nil
	}
	casted, ok := out.(*Node)
	if !ok {
		return nil, fmt.Errorf("failed to cast to Node. out: %+v", out)
	}
	return casted, nil
}

// Update
func (this *Client) Update(ctx context.Context, obj *Node, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.UpdateOptions) (*Node, error) {
	out, err := this.store.Update(context.Background(), opts)
	if err != nil {
		return nil, nil
	}
	casted, ok := out.(*Node)
	if !ok {
		return nil, fmt.Errorf("failed to cast to Node. out: %+v", out)
	}
	return casted, nil
}

// Delete
func (this *Client) Delete(ctx context.Context, obj *Node, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.DeleteOptions) error {
	return this.store.Delete(context.Background(), opts)
}

// Watch
func (this *Client) Watch(ctx context.Context, opts *github_com_galexrt_edenconfmgmt_pkg_apis_core_v1.WatchOptions) (chan *github_com_galexrt_edenconfmgmt_pkg_store_object.InformerResult, error) {
	watch, err := this.store.Watch(ctx, opts)
	if err != nil {
		return nil, err
	}
	casted, ok := watch.(chan *InformerResult)
	if !ok {
		return nil, fmt.Errorf("failed to cast generic interface watch to Node's' chan * InformerResult")
	}
	return casted, nil
}
