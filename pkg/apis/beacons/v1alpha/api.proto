// Copyright 2019 Alexander Trost. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package beacons.v1alpha;
option go_package = "github.com/galexrt/edenconfmgmt/pkg/apis/beacons/v1alpha";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1/api.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.populate_all) = true; // Needed for testgen
option (gogoproto.equal_all) = true;  // Needed for testgen
option (gogoproto.testgen_all) = false;
option (gogoproto.benchgen_all) = true;

service Beacons {
    // Get a Beacon.
    rpc Get (GetRequest) returns (GetResponse);
    // List Beacons.
    rpc List (ListRequest) returns (ListResponse);
    // Add a Beacon.
    rpc Add (AddRequest) returns (AddResponse);
    // Update a Beacon.
    rpc Update (UpdateRequest) returns (UpdateResponse);
    // Delete a Beacon.
    rpc Delete (DeleteRequest) returns (DeleteResponse);
    // Watch Beacon.
    rpc Watch (WatchRequest) returns (stream WatchResponse);
}

message Beacon {
    // Metadata for Beacon object.
    core.v1.ObjectMetadata metadata = 1;
    // Spec for Beacon.
    BeaconSpec spec = 2;
}

// TODO
message BeaconSpec {
}

// Get request content.
message GetRequest {
    // GetOptions options for a GetRequest.
    core.v1.GetOptions getOptions = 1;
}

// Get response content.
message GetResponse {
    // Beacon object.
    Beacon beacon = 1;
    // Error object.
    core.v1.Error error = 2;
}

// List request content.
message ListRequest {
    // ListOptions options for a ListRequest.
    core.v1.ListOptions listOptions = 1;
}

// List response content.
message ListResponse {
    // Beacon list.
    repeated Beacon beacons = 1;
    // Error object.
    core.v1.Error error = 2;
}

// Add Beacon request.
message AddRequest {
    // Beacon object.
    Beacon beacon = 1;
}

message AddResponse {
    // Beacon object.
    Beacon beacon = 1;
    // Error object.
    core.v1.Error error = 2;
}

// Update
message UpdateRequest {
    // Beacon object.
    Beacon beacon = 1;
}

message UpdateResponse {
    // Beacon object.
    Beacon beacon = 1;
    // Error object.
    core.v1.Error error = 2;
}

// Delete
message DeleteRequest {
    // Beacon object.
    Beacon beacon = 1;
}

message DeleteResponse {
    // Beacon object.
    Beacon beacon = 1;
    // Error object.
    core.v1.Error error = 2;
}

// Watch
message WatchRequest {
    // WatchOptions options for WatchRequest.
    core.v1.WatchOptions watchOptions = 1;
}

message WatchResponse {
    // Beacon info for watch response.
    events.v1alpha.Event event = 1;
    // Beacon for watch response.
    Beacon beacon = 2;
    // Error object.
    core.v1.Error error = 3;
}
