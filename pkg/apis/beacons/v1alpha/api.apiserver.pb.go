// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/galexrt/edenconfmgmt/pkg/apis/beacons/v1alpha/api.proto

package v1alpha

import (
	context "context"
	fmt "fmt"
	_ "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1"
	_ "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha"
	_ "github.com/galexrt/edenconfmgmt/pkg/grpc/plugins/apiserver"
	github_com_galexrt_edenconfmgmt_pkg_store_object "github.com/galexrt/edenconfmgmt/pkg/store/object"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// BeaconsService !!WARNING!! This client must only be used by internal code!
// All "external" clients must use the actual GRPC API Client.
type BeaconsService struct {
	BeaconsServer
	store *github_com_galexrt_edenconfmgmt_pkg_store_object.Store
}

// NewBeaconsService returns a new client to be used to access Beacons API with the given storage.
func NewBeaconsService(store *github_com_galexrt_edenconfmgmt_pkg_store_object.Store) *BeaconsService {
	return &BeaconsService{
		store: store,
	}
}

// Get
func (this *BeaconsService) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	out, err := this.store.Get(ctx, req.GetOptions())
	if err != nil {
		return nil, err
	}
	target := &Beacon{}
	err = target.Unmarshal(out)
	if err != nil {
		return nil, err
	}
	return &GetResponse{
		Beacon: target,
	}, nil
}

// List
func (this *BeaconsService) List(ctx context.Context, req *ListRequest) (*ListResponse, error) {
	out, err := this.store.List(ctx, req.GetOptions())
	if err != nil {
		return nil, err
	}
	list := &BeaconList{}
	list.Items = make([]*Beacon, len(out))
	for k := range out {
		list.Items[k] = &Beacon{}
		err = list.Items[k].Unmarshal(out[k])
		if err != nil {
			return nil, err
		}
	}
	return &ListResponse{
		BeaconList: list,
	}, nil
}

// Create
func (this *BeaconsService) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	if err := req.GetBeacon().SetDefaults(); err != nil {
		return nil, err
	}
	out, err := req.GetBeacon().Marshal()
	if err != nil {
		return nil, err
	}
	if err = this.store.Create(ctx, out, req.GetOptions()); err != nil {
		return nil, err
	}
	return &CreateResponse{
		Beacon: req.GetBeacon(),
	}, nil
}

// Update
func (this *BeaconsService) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	if err := req.GetBeacon().SetDefaults(); err != nil {
		return nil, err
	}
	out, err := req.GetBeacon().Marshal()
	if err != nil {
		return nil, err
	}
	if err = this.store.Update(ctx, out, req.GetOptions()); err != nil {
		return nil, err
	}
	return &UpdateResponse{
		Beacon: req.GetBeacon(),
	}, nil
}

// Delete
func (this *BeaconsService) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return &DeleteResponse{}, this.store.Delete(ctx, req.GetOptions())
}

// Watch
func (this *BeaconsService) Watch(req *WatchRequest, stream Beacons_WatchServer) error {
	watch, err := this.store.Watch(stream.Context(), req.GetOptions())
	if err != nil {
		return nil
	}
	for {
		select {
		case res := <-watch:
			value := res.Value.(*Beacon)
			if err := stream.Send(&WatchResponse{
				Beacon: value,
			}); err != nil {
				return err
			}
		case <-stream.Context().Done():
			return nil
		}
	}
	return nil
}
