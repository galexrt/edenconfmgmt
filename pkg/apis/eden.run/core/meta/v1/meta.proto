// Copyright 2019 Alexander Trost. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package core.meta.v1;
option go_package = "github.com/galexrt/edenrun/pkg/apis/eden.run/core/meta/v1";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/galexrt/edenrun/pkg/grpc/plugins/apiserver/server.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/duration.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.populate_all) = true; // Needed for testgen
option (gogoproto.equal_all) = true;  // Needed for testgen
// TODO FIXME https://github.com/gogo/protobuf/issues/407
option (gogoproto.testgen_all) = false;
option (gogoproto.benchgen_all) = true;

message ObjectMetadata {
    // APIVersion of object.
    string apiVersion = 1;
    // Kind of object.
    string kind = 2;
    // UUID of object.
    string uuid = 3;
    // Name of object.
    string name = 4;
    // Namespace of object.
    string namespace = 5;
    // Labels of object.
    map<string, string> labels = 6;
    // Annotations of object.
    map<string, string> annotations = 7;
}

message GenericObject {
    // Metadata for object.
    ObjectMetadata metadata = 1 [(validator.field) = {msg_exists : true}];
}

message VersionRequest {}

message VersionResponse {
    // Semversion compatible version number.
    string version = 1;
    // Semversion major number.
    int64 major = 2;
    // Semversion minor number.
    int64 minor = 3;
    // Semversion patch number.
    int64 patch = 4;
    // API state (e.g., alpha, beta, stable).
    string state = 5;
}

message Include {
    // Name of include (if no paths are given, will be used as file name/path).
    string name = 1;
    // List of paths.
    repeated string paths = 2;
}

message Conditions {
    // `when` condition.
    Condition when = 1;
    // `success` condition.
    Condition success = 2;
}

message Condition {
    string condition = 1;
    Retry retry = 2;
}

message Retry {
    google.protobuf.Duration interval = 1;
    int64 limit = 2;
}

message GetOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
    // Label selector in string form.
    repeated string labelSelectors = 3;
}

message ListOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
    // Label selector in string form.
    repeated string labelSelectors = 3;
}

message CreateOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
}

message UpdateOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
}

message DeleteOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
    // Label selector in string form.
    repeated string labelSelectors = 3;
}

message WatchOptions {
    // Name used for listing.
    string name = 1;
    // Namespace used for listing.
    string namespace = 2;
    // Label selector in string form.
    repeated string labelSelectors = 3;
    // Conditions to look for when watching Events on an object.
    repeated string conitions = 4;
}

message Error {
    // Code status code.
    int64 code = 1;
    // Message error message (can be empty).
    string message = 2;
}
