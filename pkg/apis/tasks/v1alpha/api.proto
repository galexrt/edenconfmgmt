// Copyright 2018 Alexander Trost. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package tasks.v1alpha;
option go_package = "github.com/galexrt/edenconfmgmt/pkg/apis/tasks/v1alpha";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1alpha/api.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

service TasksService {
    // Version returns the API version.
    rpc Version (core.v1alpha.VersionRequest) returns (core.v1alpha.VersionResponse);
    // Get a Task.
    rpc GetTask (Task) returns (Task);
    // Add a Task.
    rpc AddTask (Task) returns (AddTaskResponse);
    // Update a Task.
    rpc UpdateTask (Task) returns (UpdateTaskResponse);
    // Delete a Task.
    rpc DeleteTask (Task) returns (DeleteTaskResponse);
    // Watch a Task.
    rpc WatchTask (Task) returns (stream WatchTaskResponse);
}

message Task {
    // Metadata for Task object.
    core.v1alpha.ObjectMetadata metadata = 1;
    // Spec for Task.
    TaskSpec spec = 2;
}

message TaskSpec {
    // RunOptions.
    RunOptions runOptions = 1;
    // Steps in this Task.
    repeated Step steps = 2;
}

message Step {
    string name = 1;
    Action spec = 2;
}

message RunOptions {
    bool sync = 1;
    Serialize serialize = 2;
    Target target = 3;
}

message Serialize {
    // Count.
    int64 count = 1;
    // FailAfterAllTargets.
    bool failAfterAllTargets = 2;
}

message Target {
    // List of hosts (either name or label selector).
    repeated string hosts = 1;
    // Limit of how many hosts of the matches should be used.
    int64 limit = 2;
}

message Action {
    // Action name.
    string action = 1;
    // Conditions.
    core.v1alpha.Conditions conditions = 2;
    // RunOptions
    RunOptions runOptions = 3;
    // Map of string interface{} to be given to the action.
    repeated google.protobuf.Any parameters = 4;
}

message AddTaskResponse {}

message UpdateTaskResponse {}

message DeleteTaskResponse {}

message WatchTaskResponse {
    // Event info for watch response.
    events.v1alpha.Event event = 1;
    // Task for watch response.
    Task task = 2;
}
