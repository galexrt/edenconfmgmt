// Copyright 2018 Alexander Trost. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package eventreactors.v1alpha;
option go_package = "github.com/galexrt/edenconfmgmt/pkg/apis/eventreactors/v1alpha";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1alpha/api.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;

service EventReactorsService {
    // Version returns the API version.
    rpc Version (core.v1alpha.VersionRequest) returns (core.v1alpha.VersionResponse);
    // Get a EventReactor.
    rpc GetEventReactor (EventReactor) returns (EventReactor);
    // Add a EventReactor.
    rpc AddEventReactor (EventReactor) returns (AddEventReactorResponse);
    // Update a EventReactor.
    rpc UpdateEventReactor (EventReactor) returns (UpdateEventReactorResponse);
    // Delete a EventReactor.
    rpc DeleteEventReactor (EventReactor) returns (DeleteEventReactorResponse);
    // Watch a EventReactor.
    rpc WatchEventReactor (EventReactor) returns (stream WatchEventReactorResponse);
}

// EventReactor Reaction to certain events.
message EventReactor {
    // Metadata for EventReactor object.
    core.v1alpha.ObjectMetadata metadata = 1;
    // Spec for EventReactor.
    EventReactorSpec spec = 2;
}

message EventReactorSpec {
    // Reaction.
    Reaction reaction = 1;
    // Conditions.
    core.v1alpha.Conditions task = 2;
    //TriggerLimiter.
    TriggerLimiter triggerLimiter = 3;

}

// Reaction currently only jobs can be triggered when an event occurs.
message Reaction {
    //Jobs jobs.Jobs `yaml:"jobs"`
	// TODO Allow other events to be triggered here.
	//Events events.Events `yaml:"events"`
}

// TriggerLimiter trigger limiter options.
message TriggerLimiter {
    // MinOccurences
    int64 MinOccurences = 1;
    // ReReactDelay.
    google.protobuf.Duration reReactDelay = 2;
    // WaitForMore.
    WaitForMore waitForMore = 3;
}

// WaitForMore trigger limiter WaitForMore options.
message WaitForMore {
    // Timeout.
    google.protobuf.Duration timeout = 1;
    // ResetTimeoutOnMore
    bool resetTimeoutOnMore = 2;
}

message AddEventReactorResponse {}

message UpdateEventReactorResponse {}

message DeleteEventReactorResponse {}

message WatchEventReactorResponse {
    // Event info for watch response.
    events.v1alpha.Event event = 1;
    // EventReactor for watch response.
    EventReactor EventReactor = 2;
}
