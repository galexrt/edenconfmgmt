// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto

package v1alpha

import (
	fmt "fmt"
	v1alpha "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1alpha"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	// Metadata for the Job object.
	Metadata *v1alpha.ObjectMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec for Event.
	Spec                 *EventSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c26361c2d00172, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetMetadata() *v1alpha.ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Event) GetSpec() *EventSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type EventSpec struct {
	// Type of the Event.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Summary of Event.
	Summary              string   `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSpec) Reset()         { *m = EventSpec{} }
func (m *EventSpec) String() string { return proto.CompactTextString(m) }
func (*EventSpec) ProtoMessage()    {}
func (*EventSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c26361c2d00172, []int{1}
}

func (m *EventSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventSpec.Unmarshal(m, b)
}
func (m *EventSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventSpec.Marshal(b, m, deterministic)
}
func (m *EventSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSpec.Merge(m, src)
}
func (m *EventSpec) XXX_Size() int {
	return xxx_messageInfo_EventSpec.Size(m)
}
func (m *EventSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EventSpec proto.InternalMessageInfo

func (m *EventSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventSpec) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

type WatchEventResponse struct {
	// Event info for watch response.
	Event                *Event   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchEventResponse) Reset()         { *m = WatchEventResponse{} }
func (m *WatchEventResponse) String() string { return proto.CompactTextString(m) }
func (*WatchEventResponse) ProtoMessage()    {}
func (*WatchEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_57c26361c2d00172, []int{2}
}

func (m *WatchEventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchEventResponse.Unmarshal(m, b)
}
func (m *WatchEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchEventResponse.Marshal(b, m, deterministic)
}
func (m *WatchEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchEventResponse.Merge(m, src)
}
func (m *WatchEventResponse) XXX_Size() int {
	return xxx_messageInfo_WatchEventResponse.Size(m)
}
func (m *WatchEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchEventResponse proto.InternalMessageInfo

func (m *WatchEventResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "events.v1alpha.Event")
	proto.RegisterType((*EventSpec)(nil), "events.v1alpha.EventSpec")
	proto.RegisterType((*WatchEventResponse)(nil), "events.v1alpha.WatchEventResponse")
}

func init() {
	proto.RegisterFile("github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto", fileDescriptor_57c26361c2d00172)
}

var fileDescriptor_57c26361c2d00172 = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6a, 0xdb, 0x40,
	0x14, 0x85, 0xad, 0xd6, 0xae, 0xed, 0x71, 0xe9, 0x62, 0xa0, 0xe0, 0x8a, 0x56, 0x14, 0xad, 0x0a,
	0xc5, 0x12, 0x75, 0x17, 0x75, 0xe9, 0xa2, 0xb8, 0x34, 0x3f, 0x9b, 0x10, 0x50, 0x70, 0x02, 0xd9,
	0x8d, 0x46, 0xd7, 0xb2, 0x12, 0x4b, 0x33, 0xd1, 0x8c, 0x4c, 0xbc, 0xcb, 0x13, 0x84, 0x3c, 0x96,
	0x97, 0x59, 0x66, 0x19, 0x2b, 0x2f, 0x12, 0x34, 0x92, 0x9d, 0xc4, 0x3f, 0x10, 0xb4, 0x9b, 0x7b,
	0xee, 0xf9, 0xee, 0x3d, 0xe3, 0xb1, 0x50, 0xdf, 0x0f, 0xe4, 0x28, 0x71, 0x2d, 0xca, 0x42, 0xdb,
	0x27, 0x63, 0xb8, 0x8c, 0xa5, 0x0d, 0x1e, 0x44, 0x94, 0x45, 0xc3, 0xd0, 0x0f, 0xa5, 0xcd, 0xcf,
	0x7d, 0x9b, 0xf0, 0x40, 0xd8, 0x30, 0x81, 0x48, 0x0a, 0x7b, 0xf2, 0x83, 0x8c, 0xf9, 0x88, 0x64,
	0x9a, 0xc5, 0x63, 0x26, 0x19, 0xfe, 0x90, 0x77, 0xac, 0xa2, 0xa3, 0x77, 0x9e, 0x8f, 0x64, 0x3e,
	0xb3, 0x95, 0xcd, 0x4d, 0x86, 0xaa, 0x52, 0x85, 0x3a, 0xe5, 0xb8, 0xfe, 0xf7, 0xd5, 0x09, 0x28,
	0x8b, 0x61, 0x7d, 0xbf, 0xc9, 0x51, 0x6d, 0x27, 0x4b, 0x80, 0x7b, 0xa8, 0x11, 0x82, 0x24, 0x1e,
	0x91, 0xa4, 0xad, 0x7d, 0xd5, 0xbe, 0xb5, 0xba, 0x9f, 0xad, 0x8c, 0x59, 0x24, 0xb3, 0x0e, 0xdd,
	0x33, 0xa0, 0xf2, 0xa0, 0xf0, 0x38, 0x4b, 0x37, 0xee, 0xa0, 0xaa, 0xe0, 0x40, 0xdb, 0x6f, 0x14,
	0xf5, 0xc9, 0x7a, 0x79, 0x23, 0x4b, 0x8d, 0x3f, 0xe2, 0x40, 0x1d, 0x65, 0x33, 0x7f, 0xa3, 0xe6,
	0x52, 0xc2, 0x18, 0x55, 0xe5, 0x94, 0x83, 0xda, 0xd8, 0x74, 0xd4, 0x19, 0xb7, 0x51, 0x5d, 0x24,
	0x61, 0x48, 0xe2, 0xa9, 0x1a, 0xd9, 0x74, 0x16, 0xa5, 0xd9, 0x47, 0xf8, 0x84, 0x48, 0x3a, 0x52,
	0xbc, 0x03, 0x82, 0xb3, 0x48, 0x00, 0xfe, 0x8e, 0x6a, 0x6a, 0x65, 0x11, 0xfb, 0xe3, 0xc6, 0x00,
	0x4e, 0xee, 0xe9, 0x5e, 0xbf, 0x45, 0xef, 0xf3, 0xf5, 0x10, 0x4f, 0x02, 0x0a, 0x78, 0x17, 0xd5,
	0x8f, 0x21, 0x16, 0x01, 0x8b, 0xf0, 0xca, 0x85, 0x0b, 0xd9, 0x81, 0x8b, 0x04, 0x84, 0xd4, 0xbf,
	0x6c, 0xe9, 0x16, 0x29, 0x7a, 0xa8, 0xb1, 0x07, 0x32, 0xff, 0x2d, 0x37, 0x47, 0xd0, 0x37, 0xcb,
	0x19, 0xd9, 0xf7, 0xbc, 0x32, 0xe4, 0x1f, 0xd4, 0x1a, 0x70, 0x8f, 0x48, 0x28, 0x09, 0xff, 0x87,
	0x31, 0x94, 0x83, 0xf7, 0x51, 0xeb, 0xe9, 0x25, 0xc4, 0x36, 0xd8, 0x5c, 0x95, 0xd7, 0x5f, 0xef,
	0xdf, 0x60, 0x36, 0x37, 0xb4, 0xbb, 0xb9, 0x51, 0xb9, 0x4a, 0x0d, 0x6d, 0x96, 0x1a, 0xda, 0x6d,
	0x6a, 0x68, 0xf7, 0xa9, 0xa1, 0xdd, 0x3c, 0x18, 0x95, 0xd3, 0x5f, 0x25, 0xbf, 0x30, 0xf7, 0x9d,
	0xfa, 0x7b, 0xff, 0x7c, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x10, 0xd7, 0x7c, 0xbf, 0xa3, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	// Version returns the API version.
	Version(ctx context.Context, in *v1alpha.VersionRequest, opts ...grpc.CallOption) (*v1alpha.VersionResponse, error)
	// Get a Event.
	GetEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Add a Event.
	AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Update a Event.
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Delete a Event.
	DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	// Watch for Events.
	WatchEvents(ctx context.Context, in *Event, opts ...grpc.CallOption) (*WatchEventResponse, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Version(ctx context.Context, in *v1alpha.VersionRequest, opts ...grpc.CallOption) (*v1alpha.VersionResponse, error) {
	out := new(v1alpha.VersionResponse)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/GetEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/AddEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) WatchEvents(ctx context.Context, in *Event, opts ...grpc.CallOption) (*WatchEventResponse, error) {
	out := new(WatchEventResponse)
	err := c.cc.Invoke(ctx, "/events.v1alpha.EventService/WatchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	// Version returns the API version.
	Version(context.Context, *v1alpha.VersionRequest) (*v1alpha.VersionResponse, error)
	// Get a Event.
	GetEvent(context.Context, *Event) (*Event, error)
	// Add a Event.
	AddEvent(context.Context, *Event) (*Event, error)
	// Update a Event.
	UpdateEvent(context.Context, *Event) (*Event, error)
	// Delete a Event.
	DeleteEvent(context.Context, *Event) (*Event, error)
	// Watch for Events.
	WatchEvents(context.Context, *Event) (*WatchEventResponse, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Version(ctx, req.(*v1alpha.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/GetEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/AddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_WatchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).WatchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.v1alpha.EventService/WatchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).WatchEvents(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.v1alpha.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _EventService_Version_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _EventService_GetEvent_Handler,
		},
		{
			MethodName: "AddEvent",
			Handler:    _EventService_AddEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
		{
			MethodName: "WatchEvents",
			Handler:    _EventService_WatchEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto",
}
