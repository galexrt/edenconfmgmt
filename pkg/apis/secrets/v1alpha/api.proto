// Copyright 2018 Alexander Trost. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = 'proto3';

package secrets.v1alpha;
option go_package = "github.com/galexrt/edenconfmgmt/pkg/apis/secrets/v1alpha";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/core/v1alpha/api.proto";
import "github.com/galexrt/edenconfmgmt/pkg/apis/events/v1alpha/api.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.populate_all) = true; // Needed for testgen
option (gogoproto.equal_all) = true;  // Needed for testgen
option (gogoproto.testgen_all) = false;
option (gogoproto.benchgen_all) = true;

service Secrets {
    // Get a Secret.
    rpc Get (GetRequest) returns (GetResponse);
    // List Secret.
    rpc List (ListRequest) returns (ListResponse);
    // Add a Secret.
    rpc Add (AddRequest) returns (AddResponse);
    // Update a Secret.
    rpc Update (UpdateRequest) returns (UpdateResponse);
    // Delete a Secret.
    rpc Delete (DeleteRequest) returns (DeleteResponse);
    // Watch Secret.
    rpc Watch (WatchRequest) returns (stream WatchResponse);
}

message Secret {
    // Metadata for Secret object.
    core.v1alpha.ObjectMetadata metadata = 1;
    // Spec for Secret.
    SecretSpec spec = 2;
}

// Secrets secrets file structure. This covers the "Secrets File" and "'From Host' Static Secret File".
message SecretSpec {
    // Secrets.
    map<string, google.protobuf.Any> secrets = 1;
    // Type of secret.
    string type = 2;
}

// Get
message GetRequest {
    // GetOptions options for a GetRequest.
    core.v1alpha.GetOptions getOptions = 1;
}

message GetResponse {
    // Secret object.
    Secret secret = 1;
    // Error object.
    core.v1alpha.Error error = 2;
}

// List
message ListRequest {
    // ListOptions options for a ListRequest.
    core.v1alpha.ListOptions listOptions = 1;
}

message ListResponse {
    // Secret list.
    repeated Secret secrets = 1;
    // Error object.
    core.v1alpha.Error error = 2;
}

// Add
message AddRequest {
    // Secret object.
    Secret secret = 1;
}

message AddResponse {
    // Secret object.
    Secret secret = 1;
    // Error object.
    core.v1alpha.Error error = 2;
}

// Update
message UpdateRequest {
    // Secret object.
    Secret secret = 1;
}

message UpdateResponse {
    // Secret object.
    Secret secret = 1;
    // Error object.
    core.v1alpha.Error error = 2;
}

// Delete
message DeleteRequest {
    // Secret object.
    Secret secret = 1;
}

message DeleteResponse {
    // Secret object.
    Secret secret = 1;
    // Error object.
    core.v1alpha.Error error = 2;
}

// Watch
message WatchRequest {
    // WatchOptions options for WatchRequest.
    core.v1alpha.WatchOptions watchOptions = 1;
}

message WatchResponse {
    // Secret info for watch response.
    events.v1alpha.Event event = 1;
    // Secret for watch response.
    Secret secret = 2;
    // Error object.
    core.v1alpha.Error error = 3;
}
