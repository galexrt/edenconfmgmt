// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetApisCoreEdenRunV1alphaNodesParams creates a new GetApisCoreEdenRunV1alphaNodesParams object
// no default values defined in spec.
func NewGetApisCoreEdenRunV1alphaNodesParams() GetApisCoreEdenRunV1alphaNodesParams {

	return GetApisCoreEdenRunV1alphaNodesParams{}
}

// GetApisCoreEdenRunV1alphaNodesParams contains all the bound params for the get apis core eden run v1alpha nodes operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetApisCoreEdenRunV1alphaNodes
type GetApisCoreEdenRunV1alphaNodesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Selector to restrict list of returned objects by their labels. default is everything.
	  In: query
	*/
	LabelSelector *string
	/*Object name
	  In: query
	*/
	Name *string
	/*Namespace name
	  In: query
	*/
	Namespace *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetApisCoreEdenRunV1alphaNodesParams() beforehand.
func (o *GetApisCoreEdenRunV1alphaNodesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLabelSelector, qhkLabelSelector, _ := qs.GetOK("labelSelector")
	if err := o.bindLabelSelector(qLabelSelector, qhkLabelSelector, route.Formats); err != nil {
		res = append(res, err)
	}

	qName, qhkName, _ := qs.GetOK("name")
	if err := o.bindName(qName, qhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLabelSelector binds and validates parameter LabelSelector from query.
func (o *GetApisCoreEdenRunV1alphaNodesParams) bindLabelSelector(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.LabelSelector = &raw

	return nil
}

// bindName binds and validates parameter Name from query.
func (o *GetApisCoreEdenRunV1alphaNodesParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Name = &raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetApisCoreEdenRunV1alphaNodesParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Namespace = &raw

	return nil
}
