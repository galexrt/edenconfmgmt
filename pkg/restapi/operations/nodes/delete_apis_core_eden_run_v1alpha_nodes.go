// Code generated by go-swagger; DO NOT EDIT.

package nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteApisCoreEdenRunV1alphaNodesHandlerFunc turns a function with the right signature into a delete apis core eden run v1alpha nodes handler
type DeleteApisCoreEdenRunV1alphaNodesHandlerFunc func(DeleteApisCoreEdenRunV1alphaNodesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteApisCoreEdenRunV1alphaNodesHandlerFunc) Handle(params DeleteApisCoreEdenRunV1alphaNodesParams) middleware.Responder {
	return fn(params)
}

// DeleteApisCoreEdenRunV1alphaNodesHandler interface for that can handle valid delete apis core eden run v1alpha nodes params
type DeleteApisCoreEdenRunV1alphaNodesHandler interface {
	Handle(DeleteApisCoreEdenRunV1alphaNodesParams) middleware.Responder
}

// NewDeleteApisCoreEdenRunV1alphaNodes creates a new http.Handler for the delete apis core eden run v1alpha nodes operation
func NewDeleteApisCoreEdenRunV1alphaNodes(ctx *middleware.Context, handler DeleteApisCoreEdenRunV1alphaNodesHandler) *DeleteApisCoreEdenRunV1alphaNodes {
	return &DeleteApisCoreEdenRunV1alphaNodes{Context: ctx, Handler: handler}
}

/*DeleteApisCoreEdenRunV1alphaNodes swagger:route DELETE /apis/core.eden.run/v1alpha/nodes core.eden.run/v1alpha/nodes deleteApisCoreEdenRunV1alphaNodes

Delete a Node object.

*/
type DeleteApisCoreEdenRunV1alphaNodes struct {
	Context *middleware.Context
	Handler DeleteApisCoreEdenRunV1alphaNodesHandler
}

func (o *DeleteApisCoreEdenRunV1alphaNodes) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteApisCoreEdenRunV1alphaNodesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
